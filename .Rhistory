#remDr <- remoteDriver(browserName = "phantomjs", extraCapabilities = eCap)
##remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4444, browserName = "firefox")
eCap <- list(chrome.binary.path = "C:/Users/HomeUser/Documents/chromedriver.exe")
remDr <- remoteDriver(browserName = "chrome", extraCapabilities = eCap)
remDr$open()
remDr$open()
eCap <- list(phantomjs.binary.path = "C:/Users/HomeUser/Documents/phantomjs-1.9.7-windows/phantomjs.exe")
remDr <- remoteDriver(browserName = "phantomjs", extraCapabilities = eCap)
##remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4444, browserName = "firefox")
remDr$open()
remDr$navigate("http://www.parliament.gov.sg/publications-singapore-parliament-reports")
remDr$getCurrentUrl()
webElems <- remDr$findElements(using = "tag name", "iframe")
sapply(webElems, function(x){x$getElementAttribute("src")})
remDr$switchToFrame(webElems[[1]])
#htmlParse(remDr$getPageSource()[[1]])
#Pick the 12th parliament
option <- remDr$findElement(using = 'xpath', "//*/option[@value = '12']")
option$clickElement()
remDr$getSessions()
#Submit the form
submit <- remDr$findElement(using = 'id', 'B_Search')
remDr$screenshot(display = TRUE)
remDr$executeScript("arguments[0].click();", list(submit))
remDr$mouseMoveToLocation(webElement = submit)
remDr$click(buttonId = 0)
remDr$screenshot(display = TRUE)
remDr$getSessions()
remDr$getWindowHandles()
remDr$getCurrentWindowHandle()
remDr$getWindowHandles()
remDr$switchToWindow("{3f262975-8b26-42a1-9233-3d77e345bbdd}")
remDr$switchToWindow("{72f4b1cd-3175-4230-9499-70216f46a533}")
switchToWindow("{72f4b1cd-3175-4230-9499-70216f46a533}")
remDr$switchToSession("{72f4b1cd-3175-4230-9499-70216f46a533}")
clear()
rm(list=ls())
library(RSelenium)
RSelenium::startServer()
eCap <- list(phantomjs.binary.path = "C:/Users/HomeUser/Documents/phantomjs-1.9.7-windows/phantomjs.exe")
remDr <- remoteDriver(browserName = "phantomjs", extraCapabilities = eCap)
##remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4444, browserName = "firefox")
remDr$open()
remDr$navigate("http://www.parliament.gov.sg/publications-singapore-parliament-reports")
remDr$getCurrentUrl()
webElems <- remDr$findElements(using = "tag name", "iframe")
sapply(webElems, function(x){x$getElementAttribute("src")})
remDr$switchToFrame(webElems[[1]])
option <- remDr$findElement(using = 'xpath', "//*/option[@value = '12']")
option$clickElement()
remDr$getSessions()
close()
remDr$close()
remDr$getSessions()
remDr$close()
install.packages("pgmm")
install.packages("gbm")
install.packages("forecast")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
data(vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
train<-vowel.train
test<-vowel.test
head(test)
head(vowel.test)
rm(vowel.test)
rm(vowel.train)
test$y<-as.factor(test$y)
train$y<-as.factor(train$y)
str(train)
set.seed(33833)
library(caret)
RF<-train(y~.,data=train, method="rf",prox=TRUE)
GBM<-train(y~.,data=train, method="gbm",prox=TRUE)
summary(train)
head(train)
tail(train)
GBM<-train(y~.,data=train, method="gbm",prox=TRUE)
GBM<-train(y~.,data=as.data.frame(train), method="gbm",prox=TRUE)
GBM<-train(y~.,data=train, method="gbm",verbose=FALSE)
RFval<-predict(RF,newdata=test)
confusionMatrix(RFval,test$y)
GBMval<-predict(GBM,newdata=test)
confusionMatrix(GBMval,test$y)
new <-data.table(RF=RF$y, GBM=GBM$y, actual=test$y)
new <-as.data.table(RF=RF$y, GBM=GBM$y, actual=test$y)
new <-data.frame(RF=RF$y, GBM=GBM$y, actual=test$y)
new <-data.frame(RF=RFval$y, GBM=GBMval$y, actual=test$y)
new <-data.frame(RF=RFval, GBM=GBMval, actual=test$y)
subset(new,RF==GBM)
confusionMatrix(new2$RF,new2$actual)
new2<-subset(new,RF==GBM)
confusionMatrix(new2$RF,new2$actual)
set.seed(33833)
RF<-train(y~.,data=train, method="rf",prox=TRUE)
GBM<-train(y~.,data=train, method="gbm",verbose=FALSE)
RFval<-predict(RF,newdata=test)
confusionMatrix(RFval,test$y)
GBMval<-predict(GBM,newdata=test)
confusionMatrix(GBMval,test$y)
set.seed(3433)
library(AppliedPredictiveModeling)
head(training)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
q2RF<-train(diagnosis~.,data=training, method="rf",prox=TRUE)
q2GBM<-train(diagnosis~.,data=training, method="gbm",verbose=FALSE)
q2RF<-train(diagnosis~.,data=training, method="lda",prox=TRUE)
q2RF<-train(diagnosis~.,data=training, method="rf",prox=TRUE)
q2LDA<-train(diagnosis~.,data=training, method="lda",prox=TRUE)
q2RFval<-predict(q2RF,newdata=test)
q2RFval<-predict(q2RF,newdata=testing)
q2GBMval<-predict(q2GBM,newdata=testing)
q2LDAval<-predict(q2LDA,newdata=testing)
q2RFval<-predict(q2RF,newdata=testing)
q2GBMval<-predict(q2GBM,newdata=testing)
q2LDAval<-predict(q2LDA,newdata=testing)
q2RFtrval<-predict(q2RF,newdata=training)
q2GBMtrval<-predict(q2GBM,newdata=training)
q2LDAtrval<-predict(q2LDA,newdata=training)
q2train2 <-data.frame(RF=q2RFtrval, GBM=q2GBMtrval, LDA=q2LDAtrval, actual=training$diagnosis)
q2test2 <-data.frame(RF=q2RFval, GBM=q2GBMval, LDA=q2LDAval)
q2finalRF<-train(actual~.,data=q2train2, method="rf",prox=TRUE)
q2finalval<-predict(q2finalRF, newdata=q2test2)
confusionMatrix(q2finalval,testing$diagnosis)
confusionMatrix(q2RFval,testing$diagnosis)
confusionMatrix(q2GBMval,testing$diagnosis)
confusionMatrix(q2LDAval,testing$diagnosis)
set.seed(233)
rm(all)
rm()
?plot.enet
??plot.enet
install.packages("plot.enet")
?plot.enet
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
head(training)
q3lasso<-train(CompressiveStrength~.,data=training, method="lasso",prox=TRUE)
plot(q3lasso$fit, "norm", label=TRUE)
q3lasso<-train(CompressiveStrength~.,data=training, method="lasso")
plot(q3lasso$fit, "norm", label=TRUE)
plot(q3lasso$lasso.fit, "norm", label=TRUE)
q3lasso
plot(q3lasso$finalModel, "norm", label=TRUE)
plot(q3lasso$finalModel, "step", label=TRUE)
plot(q3lasso$finalModel, "penalty", label=TRUE)
library(lubridate)  # For year() function below
install.packages("lubriate")
install.packages("lubridate")
?forecast
library(forecast)
?bats
?forecast
dat = read.csv("C:/R/gaData.csv")
training = dat[year(dat$date) < 2012,]
library(lubridate)  # For year() function below
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
fit<-bats(tstrain)
forecast(fit, 2)
testing
forecast(fit, 235)
testing$95range<-visitsTumblr>=forecastbat$Lo 95 & visitsTumblr<=forecastbat$Hi 95
testing$inrange<-visitsTumblr>=forecastbat$Lo 95 & visitsTumblr<=forecastbat$Hi 95
str(forecastbt)
str(forecastbat)
forecastbat<-forecast(fit, 235)
str(forecastbat)
forecastbat$lower
forecastbat$lower[,2]
testing$inrange<-visitsTumblr>=forecastbat$lower[,2] & visitsTumblr<=forecastbat$higher[,2]
testing$inrange<-esting$visitsTumblr>=forecastbat$lower[,2] & esting$visitsTumblr<=forecastbat$higher[,2]
testing$inrange<-testing$visitsTumblr>=forecastbat$lower[,2] & testing$visitsTumblr<=forecastbat$higher[,2]
testing$inrange<-(testing$visitsTumblr>=forecastbat$lower[,2] & testing$visitsTumblr<=forecastbat$higher[,2])
testing$inrange<-testing$visitsTumblr>=forecastbat$lower[,2] # & testing$visitsTumblr<=forecastbat$higher[,2])
testing
testing$inrange<-(testing$visitsTumblr>=forecastbat$lower[,2] && testing$visitsTumblr<=forecastbat$higher[,2])
summary(testing$inrange)
summary(testing)
testing
testing$visitsTumblr<=forecastbat$higher[,2]
testing$visitsTumblr>=forecastbat$lower[,2]
forecastbat$higher[,2]
testing$inrange<-(testing$visitsTumblr>=forecastbat$lower[,2] && testing$visitsTumblr<=forecastbat$upper[,2])
summary(testing)
set.seed(325)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
model5<-train(compressiveStrength~.,data=training, method="e1071",prox=TRUE)
head(training)
model5<-train(CompressiveStrength~.,data=training, method="e1071",prox=TRUE)
?e1071
library(e1071)
?e1071
?e1071
?svm
model5<-svm(CompressiveStrength~.,data=training, method="e1071")
pred=predict(model5, testing)
confusionMatrix(pred,testing$CompressiveStrength)
RMSE(pred,testing$CompressiveStrength)
dat = read.csv("C:/R/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
fit<-bats(tstrain)
forecastbat<-forecast(fit, 235)
testing$inrange<-(testing$visitsTumblr>=forecastbat$lower[,2] && testing$visitsTumblr<=forecastbat$upper[,2])
summary(testing)
forecastbat
fit
tstrain
h <- dim(testing)[1]
fcast <- forecast(fit, level = 95, h = h)
accuracy(fcast, testing$visitsTumblr)
result <- c()
l <- length(fcast$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcast$lower[i] < x & x < fcast$upper[i]
result <- c(result, a)
}
sum(result)/l * 100
facst
fcast
h
forecastbat
head(fcast)
head(forecastbat)
fcast
exp(1)
setwd("C:/Users/HomeUser/Google Drive/R/Data Tools Assignment")
setwd("~/GitHub/courses/09_DevelopingDataProducts/shiny/testApp")
shiny::runApp()
plot(y=x)
plot("y=x")
curve("y=x")
curve("x=1")
plot(curve("x=1"))
plot(curve(x=1))
?curve
plot(cuve(function(x) 2x+1))
plot(cuve(function(x) 2x))
plot(curve(function(x) 2x))
hi<-function(x) 2x
chippy <- function(x) sin(cos(x)*exp(-x/2))
hi <- function(x) 2x
hi <- function(x) 2x+1
hi <- function(x) (2x+1)
hi <- function(x) sin(x)
hi <- function(x) (1)
hi <- function(x) (1-x)
hi <- function(x) (2*x^2)
plot(curve(hi))
plot(curve(hi),line)
?plot
plot(curve(hi),type=l)
plot(curve(hi),type="l")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
print(x)
print("x")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
print("a","b")
?print
print("a"&"b")
print("a"+"b")
print(paste0("a","b"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input$a=1
a=5
b=90
c=5
plot(curve(function(x) (a*x^2+b*x+c)),type="l")
plot(curve(function(x) (a*x^2+b*x+c)))
plot(curve(function(x) (1*x^2+2*x+2)))
shiny::runApp()
plot(curve(cplot),type="l",xlim=c(output$f_root,output$s_root)))
plot(curve(cplot),type="l",xlim=c(x,x2)))
}
plot(curve(cplot),type="l",xlim=(x,x2))
plot(curve(cplot),type="l",xlim=c((1,2))
plot(curve(cplot),type="l",xlim=c(1,2))
output$s_root <- renderPrint({print(paste0("x2 = ",secondroot(input$a, input$b, input$c)))})
)
plot(curve(cplot),type="l")
-2
plot(curve(cplot),type="l",xlim=c(-2,10)))
output$f_root <- renderPrint({print(paste0("x1 = ",firstroot(input$a, input$b, input$c)))})
plot(curve(cplot),type="l")
function(x) (input$a*x^2+input$b*x+input$c)
)
setwd("C:/Users/HomeUser/Google Drive/R/Data Tools Assignment")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
if(x==1)
print("1")
x=1
if(x==1)
print("1")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
if(c>=x) c else x
if(c<=x) c else x
shiny::runApp()
shiny::runApp()
abs(-10)
shiny::runApp()
shiny::runApp()
shiny::runApp()
cplot<-function(x) (a*x^2+b*x+c)
plot(curve(cplot),type="l",xlim=c(xlim2()-abs(xlim2()*0.2),xlim1()+abs(xlim1()*0.2)),ylim=c(-10,10)
plot(curve(cplot),type="l")
plot(curve(cplot),type="l",xlim=c(-20,0),ylim=c(-10,10)
)
?curve
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?plot
shiny::runApp()
shiny::runApp()
plot(1:10, rnorm(10), ylim=c(0,10), yaxs="i")
curve()
curve(function(x) (0))
plot(curve(function(x) (0)))
plot(curve((function(x) (0)))
)
line<-function(x) (0)
plot(curve(line))
line<-function(x) (x)
plot(curve(line))
line<-function(x) (x-x)
plot(curve(line))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
isnull(0)
isna(0)
is.na(0)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
subtitle    : Data meets presentation
slidify(Slides.Rmd)
library(slidify)
install.packages("slidify")
install.packages("Slidify")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
slidify(Slides.Rmd)
setwd("C:/Users/HomeUser/Google Drive/R/Data Tools Assignment/DataTools_Assignment")
slidify(Slides.Rmd)
?slidify
slidify("Slides.Rmd")
setwd("C:/Users/HomeUser/Google Drive/R/Data Tools Assignment/DataTools_Assignment/DataTools_Assignment")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
slidify("Slides.Rmd")
runDeck()
runDeck(Slides.Rmd)
runDeck("Slides.Rmd")
runDeck()
dir
dir()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
library(rCharts)
install.packages("rCharts")
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
library(rCharts)
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
runDeck()
runDeck()
library(rCharts)
install.packages(c("curl", "RcppArmadillo", "RcppEigen"))
require(devtools)
install_github('rCharts', 'ramnathv')
library(RCurl)
install.packages("RCurl")
require(devtools)
install_github('rCharts', 'ramnathv')
runDeck()
library(slidify)
runDeck()
setwd("C:/Users/HomeUser/Google Drive/R/Data Tools Assignment/DataTools_Assignment/DataTools_Assignment")
runDeck()
library(shiny)
library(mime)
install.packages("mime")
install.packages("shiny")
runDeck()
library(rCharts)
runDeck()
library(knitr)
runDeck()
